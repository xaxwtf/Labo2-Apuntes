Restricción	Descripción
where T : struct	El argumento de tipo debe ser un tipo de valor que no acepta valores NULL. Para más información sobre los tipos de valor que admiten un valor NULL, consulte Tipos de valor que admiten un valor NULL. Todos los tipos de valor tienen un constructor sin parámetros accesible, por lo que la restricción struct implica la restricción new() y no se puede combinar con la restricción new(). No puede combinar la restricción struct con la restricción unmanaged.
where T : class	El argumento de tipo debe ser un tipo de referencia. Esta restricción se aplica también a cualquier clase, interfaz, delegado o tipo de matriz. En un contexto que acepta valores NULL, T debe ser un tipo de referencia que no acepta valores NULL.
where T : class?	El argumento de tipo debe ser un tipo de referencia, que acepte o no valores NULL. Esta restricción se aplica también a cualquier clase, interfaz, delegado o tipo de matriz.
where T : notnull	El argumento de tipo debe ser un tipo que no acepta valores NULL. El argumento puede ser un tipo de referencia que no acepta valores NULL o un tipo de valor que no acepta valores NULL.
where T : default	Esta restricción resuelve la ambigüedad cuando es necesario especificar un parámetro de tipo sin restricciones al invalidar un método o proporcionar una implementación de interfaz explícita. La restricción default implica el método base sin la restricción class o struct. Para obtener más información, vea la propuesta de especificación de la restricción default.
where T : unmanaged	El argumento de tipo debe ser un tipo no administrado que no acepta valores NULL. La restricción unmanaged implica la restricción struct y no se puede combinar con las restricciones struct ni new().
where T : new()	El argumento de tipo debe tener un constructor sin parámetros público. Cuando se usa conjuntamente con otras restricciones, la restricción new() debe especificarse en último lugar. La restricción new() no se puede combinar con las restricciones struct ni unmanaged.
where T :<nombre de clase base>	El argumento de tipo debe ser o derivarse de la clase base especificada. En un contexto que acepta valores NULL, T debe ser un tipo de referencia que no acepta valores NULL derivado de la clase base especificada.
where T :<nombre de clase base>?	El argumento de tipo debe ser o derivarse de la clase base especificada. En un contexto que acepta valores NULL, T puede ser un tipo que acepta valores NULL o que no acepta valores NULL derivado de la clase base especificada.
where T :<nombre de interfaz>	El argumento de tipo debe ser o implementar la interfaz especificada. Pueden especificarse varias restricciones de interfaz. La interfaz de restricciones también puede ser genérica. En un contexto que acepta valores NULL, T debe ser un tipo que no acepta valores NULL que implemente la interfaz especificada.
where T :<nombre de interfaz>?	El argumento de tipo debe ser o implementar la interfaz especificada. Pueden especificarse varias restricciones de interfaz. La interfaz de restricciones también puede ser genérica. En un contexto que acepta valores NULL, T puede ser un tipo de referencia que acepta valores NULL, un tipo de referencia que no acepta valores NULL o un tipo de valor. T no puede ser un tipo de valor que admite un valor NULL.
where T : U	El argumento de tipo proporcionado por T debe ser o se debe derivar del argumento proporcionado para U. En un contexto que admite un valor NULL, si U puede ser un tipo de referencia que no acepta valores NULL, T debe ser un tipo de referencia que no acepta valores NULL. Si U es un tipo de referencia que admite un valor NULL, T puede aceptar valores NULL o no.